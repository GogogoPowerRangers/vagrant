//---------------------------------------------------------------------------------
// **** 	Licensed Materials - Property of IBM
// **** 
// ****     5725-K40
// **** 
// ****     (C) Copyright IBM Corp. 2013  All Rights Reserved.
// **** 
// ****     US Government Users Restricted Rights - Use, duplication or
// ****     disclosure restricted by GSA ADP Schedule Contract with
// ****     IBM Corp.
//---------------------------------------------------------------------------------

set copyright = "Licensed Materials - Property of IBM 5725-I45 (C) Copyright IBM Corporation 2013. All rights reserved. US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.";

//
// Module:  kynutil.lib
//
// Purpose: KYN Agent specific utilities for discovery and metric conversion
//
//---------------------------------------------------------------------------------



//---------------------------------------------------------------------------------
// Function: KYN_isProcessSerOrESBAffinity
//
// Purpose:  Check for KYN affinity matches and return true if matched  
//
//
// Inputs:   affstr - Affinity to check for.
//
// Outputs:  value  - Returns True (1) if found otherwise (0) false
//
//---------------------------------------------------------------------------------

Function KYN_isProcessSerOrESBAffinity value affstr
{
    value = 0;

    checkAffinity = "0000000000000000000000000000000100000000000";

    // Returns 0 if matched and -1 if not matched 

    match = affinity("compare",affstr,checkAffinity);

    if (match == 0)
    {
        value = 1;
    }    
    else
    {
        checkAffinity = "0000G00000000000000000000000000000000000000";
    
        match = affinity(("compare",affstr,checkAffinity);

        if (match == 0)
        {
            value = 1;
        }
    }
	
	if (properties.print == "y")
    {
        retcode = rasprint("KYN_isProcessSerOrESBAffinity: Using input %s. Value is %s",
                           affstr,value);
    }

    return;
}

Function KYN_isPortalAffinity value affstr
{
    value = 0;

    checkAffinity = "0000W00000000000000000000000000000000000000";

    // Returns 0 if matched and -1 if not matched 

    match = affinity("compare",affstr,checkAffinity);

    if (match == 0)
    {
        value = 1;
    }    
    
	
	if (properties.print == "y")
    {
        retcode = rasprint("KYN_isPortalAffinity: Using input %s. Value is %s",
                           affstr,value);
    }

    return;
}


//---------------------------------------------------------------------------------
// Function: KYN_getAffinity
//
// Purpose:  Check for KYN affinity return the appropriate number depending on affinity 
//
//
// Inputs:   affstr - Affinity to check for.
//
// Outputs:  value  - 1 - Portal Server; 2 - ESB or Process Server; Base Websphere & everything 
// else - 3;
//
//---------------------------------------------------------------------------------

Function KYN_getAffinity value affstr
{
    value = 3;

	//portalAffinity1 = "0000W00000000000000000000000000000000000000";

    // Returns 0 if matched and -1 if not matched 
	// TODO: Ask clyde about how this compare works
    // match = affinity("compare",affstr,portalAffinity1);
	// if (match == 0)
	
	portalAffinity32Char = "0000W000000000000000000000000000";

    if (strcontains(affstr, portalAffinity32Char) == 1 )
    {
        value = 1;
		
		if (properties.print == "y")
		{
			retcode = rasprint("KYN_getAffinity: Using input %s. Value is %s",
							   affstr,value);
		}
		
		return;
    } 

	// Check for process server affinity
	//processServAffinity = "0000000000000000000000000000000100000000000";
	
	processServAffinity32Char = "00000000000000000000000000000001";

    if (strcontains(affstr, processServAffinity32Char) == 1 )
    {
        value = 2;
		
		if (properties.print == "y")
		{
			retcode = rasprint("KYN_getAffinity: Using input %s. Value is %s",
							   affstr,value);
		}
		
		return;
    } 
	
	// Check for process server affinity
	//esbServAffinity = "0000G00000000000000000000000000000000000000";
	
	esbServAffinity32Char = "0000G000000000000000000000000000";

    if (strcontains(affstr, esbServAffinity32Char) == 1 )
    {
        value = 2;
		
		if (properties.print == "y")
		{
			retcode = rasprint("KYN_getAffinity: Using input %s. Value is %s",
							   affstr,value);
		}
		
		return;
    } 
	
	
	value = 3; // Base websphere
	    
	if (properties.print == "y")
	{
		retcode = rasprint("KYN_getAffinity: Using input %s. Value is %s",
						   affstr,value);
	}
	
    return;
}



Function KYN_DisplayPercentage value input parm
{
    value = input;
	
	if (input == "")
	{
		value = 0;
	}
	else if (input == "-1")
	{
		value = 0;
	}
    
    if (parm == "display")
    {
        value = value "%";
    }

    if (properties.print == "y")
    {
        retcode = rasprint("KYN_DisplayPercentage: Using input %s. Value is %s",
                           input,value);
    }
       
    return;
}

Function KYN_AppStatus value input parm
{ 	
	set notRunStatus = "http://open-services.net/ns/perfmon#NotRunning";
	set runStatus = "http://open-services.net/ns/perfmon#Running";
	set unknownStatus = "http://open-services.net/ns/perfmon#Unknown";
	
	value = unknownStatus;
    
	// for some reason using logical equals is causing compile errors
	
	if (strcontains(input, "StandBy") == 1 )
	{
		value = notRunStatus;
	}
	else if (strcontains(input, "Discovered") == 1 )
	{
		value = notRunStatus;
	}
	else if (strcontains(input, "Stopping") == 1 )
	{
		value = notRunStatus;
	}
	else if (strcontains(input, "Stopped") == 1 )
	{
		value = notRunStatus;
	}
	else if (strcontains(input, "Failed") == 1 )
	{
		value = notRunStatus;
	}
	else if (strcontains(input, "Starting") == 1 )
	{
		value = runStatus;
	}
	else if (strcontains(input, "Running") == 1 )
	{
		value = runStatus;
	}
	else 
	{
		value = unknownStatus;
	}
	
	
	if (parm == "display")
    {
        if (value == notRunStatus)
		{
			value = "Not running";
		}
		else if (value == runStatus)
		{
			value = "Running";
		}
		else
		{
			value = "Unknown";
		}		
    }
	
	if (parm == "bundlekey")
    {
        if (value == notRunStatus)
		{
			value = "notrunning_key";
		}
		else if (value == runStatus)
		{
			value = "running_key";
		}
		else
		{
			value = "unknown_key";
		}		
    }
    
    if (properties.print == "y")
    {
        retcode = rasprint("KYN_AppStatus: Using input %s. Value is %s",
                           input,value);
    }
       
    return;
}

Function KYN_GetBootstrapPort value input
{
    value = input;
	
	if (input == "-1")
	{
		value = 0;
	}
	else if (input == "")
	{
		value = 0;
	}
	else if (missingInput(input) == 1)
	{
		value = 0;
	}
	else if (strcontains(input, "NA") == 1 )
	{
		value = 0;
	}
	
	if (properties.print == "y")
    {
        retcode = rasprint("KYN_GetBootstrapPort: Using input %s. Value is %s",
                           input,value);
    }
       
    return;
	
}


Function KYN_AppHealth value input param
{
	set urlStr = "http://jazz.net/ns/admin/health#";
	
    value = input;
    
	if (input == -10)
    {
        value = "Idle";
    }
    else if (input == 0)
    {
        value = "Unknown";
    }
	else if (input == 1)
    {
        value = "Good";
    }
	else if (input == 2)
    {
        value = "Fair";
    }
	else if (input == 3)
    {
        value = "Bad";
    }
	else
    {
        value = input;
    }
	
	if (value == "Idle")
    {
        value = "Unknown";
    }
	else if (value == "Unknown")
    {
        value = "Unknown";
    }
	else if (value == "Good")
    {
        value = "OK";
    }
	else if (value == "Fair")
    {
        value = "Warning";
    }
	else if (value == "Bad")
    {
        value = "Error";
    }
	
	
	if (param == "display")
	{
		value = value;
	}
	else {
		value = urlStr value; 
	}
	
	if (param == "bundlekey")
	{
		value = value "_key";
	}
    
    if (properties.print == "y")
    {
        retcode = rasprint("KYN_AppHealth: Using input %s. Value is %s",
                           input,value);
    }
       
    return;
}


//---------------------------------------------------------------------------------
// Function: KYN_CalculatePercentage
//
// Purpose:  Return percentage of passed parameters 
//
// Inputs:   numer by denom - Raw value
//
//           parm       - If parm set to 'display' then return percent sign after 
//                        value.
//
// Outputs:  value      - Returned converted value
//
//---------------------------------------------------------------------------------

Function KYN_CalculatePercentage value numer den parm
{
    value = 0;
	
	tointeger denom den;
	
	//if (missingInput(denom) == 1)
    //{
    //   value = 0;
    //   retcode = rasprint("KYN_CalculatePercentage entry - exit.  Missing denominator.");
    //   return;
    //} 
	
	if (denom == 0)
	{
	   value = 0;
       //retcode = rasprint("KYN_CalculatePercentage entry - exit.  Denominator is 0");
       //return;
	}
	else {
		value  = (numer / denom) * 100;
	}
	
	tointeger x value;
    
	value  = x;
	

    if (parm == "display")
    {
        value = value "%";
    }

    if (properties.print == "y")
    {
        retcode = rasprint("KYN_CalculatePercentage: Using input numer: %s denom: %s. Value is %s",
                           number, denom, value);
    }
       
    return;
}

// 

//---------------------------------------------------------------------------------
// Function: KYN_FormatIPAddress
//
// Purpose:  ITM {IP_ADDR} is returning "<#9.42.76.12[6015]>"
// Change it to 9.42.76.12 
// For IPv6: "<#2001:0db8:85a3:0042:0000:8a2e:0370:7334[6015]>" to
// 2001:0db8:85a3:0042:0000:8a2e:0370:7334
//
// Inputs:   ipaddr
//
// osdp- 0 - return plain ip, 1 - formatOSDPIPAddress ip, 2 - formatOSDPContextAddressSpace ip.
//
// Outputs:  value      - Returned converted ipadd value
//
//---------------------------------------------------------------------------------

Function KYN_FormatIPAddress value osdp ipaddr
{
    value = ipaddr;
	
	// "<#9.42.76.12[6015]>"
	
    len = strcontains(value,'[','O');
	
	if (len > 0)
	{
	
		// grab the string to the left of the square bracket
        value = strsplice(value, "[", "left");
		
		// grab the string to the right of the pound
        value = strsplice(value, "#", "right");
	}
	
	if (properties.print == "y")
    {
        retcode = rasprint("KYN_FormatIPAddress: Input IP: %s. Output is %s", ipaddr, value);
    }
	
	if (osdp == "0") 
	{
		// plain ip
		value = value; 
	}
	else if (osdp == "1") 
	{
		// formatOSDPIPAddress
		formatted = "";
		formatted = formatOSDPIPAddress(value);
		
		value = formatted;
	}
	else if (osdp == "2") 
	{
		// formatOSDPContextAddressSpace
		formattedCS = "";
		formattedCS = formatOSDPContextAddressSpace(value);
		
		value = formattedCS;
	}
	
	if (properties.print == "y")
    {
        retcode = rasprint("KYN_FormatIPAddress after formatting: Input IP: %s. Output is %s, OSDP option: %s",  ipaddr, value, osdp);
    }
       
    return;
}

Function KYN_FormatInstancePath value cellname nodename sername path
{
    
	
	// path - /opt/IBM/WAS85ND/profiles/AppSrv02
	// output - /opt/IBM/WAS85ND/profiles/AppSrv02/config/cells/
	// tivn32Node02Cell/nodes/tivn32Node02/servers/server1
	
	value = path;
	
	if (missingInput(path) == 1)
	{
		value = "";
	}
	else if (strcontains(path, "\") == 1 )
	{
		// TODO: Note sure if I need to delimit backslash
		
		value = value "\config\cells\";
		value = value cellname;
		value = value "\nodes\";
		value = value nodename;
		value = value "\servers\";
		value = value sername;
	}
	else
	{
		value = value "/config/cells/";
		value = value cellname;
		value = value "/nodes/";
		value = value nodename;
		value = value "/servers/";
		value = value sername;
		
	}
		

	if (properties.print == "y")
    {
        retcode = rasprint("KYN_FormatInstancePath after formatting: Input Path: %s. Output is %s",  path, value);
    }
       
    return;
}





